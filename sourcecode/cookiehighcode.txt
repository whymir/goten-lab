<?php
session_start();
include('./core/configuration.php');
include('./core/function.php');

$session = new Session();
$session->check_invalid_session();

$secure = new Secure();
$level = new Level();

// Static secret for signing JWT
$secret = 'gotenframework';

function base64url_encode($data) {
    return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

function base64url_decode($data) {
    return base64_decode(strtr($data, '-_', '+/'));
}

function generate_jwt($payload, $secret) {
    $header = ['alg' => 'HS256', 'typ' => 'JWT'];
    $header_encoded = base64url_encode(json_encode($header));
    $payload_encoded = base64url_encode(json_encode($payload));
    $signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", $secret, true);
    $signature_encoded = base64url_encode($signature);
    return "$header_encoded.$payload_encoded.$signature_encoded";
}

function verify_jwt($token, $secret) {
    $parts = explode('.', $token);
    if (count($parts) !== 3) return false;
    list($header_encoded, $payload_encoded, $signature_provided) = $parts;
    $expected_signature = base64url_encode(hash_hmac('sha256', "$header_encoded.$payload_encoded", $secret, true));
    if (!hash_equals($expected_signature, $signature_provided)) return false;
    return json_decode(base64url_decode($payload_encoded), true);
}

// Generate JWT if not already present
if (!isset($_COOKIE['auth_token'])) {
    $payload = ['role' => 'user'];
    $jwt = generate_jwt($payload, $secret);
    setcookie("auth_token", $jwt, time() + 3600, "/");
}

// Decode and verify JWT
$role = "user"; // default fallback
if (isset($_COOKIE['auth_token'])) {
    $payload = verify_jwt($_COOKIE['auth_token'], $secret);
    if ($payload && isset($payload['role'])) {
        $role = $payload['role'];
    }
}
?>